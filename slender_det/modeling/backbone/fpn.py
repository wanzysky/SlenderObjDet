import math

import torch.nn.functional as F
import fvcore.nn.weight_init as weight_init
from detectron2.modeling.backbone import BACKBONE_REGISTRY, Backbone
from detectron2.modeling.backbone import build_resnet_backbone
from detectron2.modeling.backbone.fpn import FPN, LastLevelP6P7
from detectron2.layers import ShapeSpec, Conv2d, cat, get_norm

from slender_det.layers.visual_transformer import (
    Tokenizer, Transformer, Projector, DownsampleEmbedding
)


@BACKBONE_REGISTRY.register()
def build_retinanet_resnet_vt_fpn(cfg, input_shape: ShapeSpec):
    """
    Args:
        cfg: a detectron2 CfgNode

    Returns:
        backbone (Backbone): backbone module, must be a subclass of :class:`Backbone`.
    """
    bottom_up = build_resnet_backbone(cfg, input_shape)
    in_features = cfg.MODEL.FPN.IN_FEATURES
    out_channels = cfg.MODEL.FPN.OUT_CHANNELS
    in_channels_p6p7 = out_channels
    backbone = VT_FPN(
        bottom_up=bottom_up,
        in_features=in_features,
        out_channels=out_channels,
        norm=cfg.MODEL.FPN.NORM,
        top_block=LastLevelP6P7(in_channels_p6p7, out_channels, in_feature="p5"),
        fuse_type=cfg.MODEL.FPN.FUSE_TYPE,
    )
    return backbone

@BACKBONE_REGISTRY.register()
def build_retinanet_resnet_vt_fpn_backbone_use_p5(cfg, input_shape: ShapeSpec):
    """
    Args:
        cfg: a detectron2 CfgNode

    Returns:
        backbone (Backbone): backbone module, must be a subclass of :class:`Backbone`.
    """
    bottom_up = build_resnet_backbone(cfg, input_shape)
    in_features = cfg.MODEL.FPN.IN_FEATURES
    out_channels = cfg.MODEL.FPN.OUT_CHANNELS
    in_channels_p6p7 = out_channels
    backbone = VT_FPN(
        bottom_up=bottom_up,
        in_features=in_features,
        out_channels=out_channels,
        norm=cfg.MODEL.FPN.NORM,
        top_block=LastLevelP6P7(in_channels_p6p7, out_channels, in_feature="p5"),
        fuse_type=cfg.MODEL.FPN.FUSE_TYPE,
    )
    return backbone

@BACKBONE_REGISTRY.register()
def build_retinanet_resnet_fpn_backbone_use_p5(cfg, input_shape: ShapeSpec):
    """
    Args:
        cfg: a detectron2 CfgNode

    Returns:
        backbone (Backbone): backbone module, must be a subclass of :class:`Backbone`.
    """
    bottom_up = build_resnet_backbone(cfg, input_shape)
    in_features = cfg.MODEL.FPN.IN_FEATURES
    out_channels = cfg.MODEL.FPN.OUT_CHANNELS
    in_channels_p6p7 = out_channels
    backbone = FPN(
        bottom_up=bottom_up,
        in_features=in_features,
        out_channels=out_channels,
        norm=cfg.MODEL.FPN.NORM,
        top_block=LastLevelP6P7(in_channels_p6p7, out_channels, in_feature="p5"),
        fuse_type=cfg.MODEL.FPN.FUSE_TYPE,
    )
    return backbone


def _assert_strides_are_log2_contiguous(strides):
    """
    Assert that each stride is 2x times its preceding stride, i.e. "contiguous in log2".
    """
    for i, stride in enumerate(strides[1:], 1):
        assert stride == 2 * strides[i - 1], "Strides {} {} are not log2 contiguous".format(
            stride, strides[i - 1]
        )


class VT_FPN(FPN):
    """
    This class implements VT-FPN in Visual Transformers: (https://arxiv.org/abs/2006.03677).
    It replaces lateral convolutions with
    visual transformers in a conventional FPN.
    """
    def __init__(
        self, bottom_up, in_features, out_channels,
        norm="", top_block=None, fuse_type="sum",
        pos_size_base=8, CT=1024, length=8
    ):

        """
        Args:
            bottom_up (Backbone): module representing the bottom up subnetwork.
                Must be a subclass of :class:`Backbone`. The multi-scale feature
                maps generated by the bottom up network, and listed in `in_features`,
                are used to generate FPN levels.
            in_features (list[str]): names of the input feature maps coming
                from the backbone to which FPN is attached. For example, if the
                backbone produces ["res2", "res3", "res4"], any *contiguous* sublist
                of these may be used; order must be from high to low resolution.
            out_channels (int): number of channels in the output feature maps.
            norm (str): the normalization to use.
            top_block (nn.Module or None): if provided, an extra operation will
                be performed on the output of the last (smallest resolution)
                FPN output, and the result will extend the result list. The top_block
                further downsamples the feature map. It must have an attribute
                "num_levels", meaning the number of extra FPN levels added by
                this block, and "in_feature", which is a string representing
                its input feature (e.g., p5).
            fuse_type (str): types for fusing the top down features and the lateral
                ones. It can be "sum" (default), which sums up element-wise; or "avg",
                which takes the element-wise mean of the two.
        """
        super(VT_FPN, self).__init__(
            bottom_up=bottom_up,
            in_features=in_features,
            out_channels=out_channels,
            norm=norm,
            top_block=top_block,
            fuse_type=fuse_type
        )
        assert isinstance(bottom_up, Backbone)

        # Feature map strides and channels from the bottom up network (e.g. ResNet)
        input_shapes = bottom_up.output_shape()
        in_strides = [input_shapes[f].stride for f in in_features]
        in_channels = [input_shapes[f].channels for f in in_features]

        _assert_strides_are_log2_contiguous(in_strides)
        self.length = length
        tokenizers = []
        projectors = []
        output_convs = []

        use_bias = norm == ""
        num_levels = len(in_channels)
        for idx, in_channels in enumerate(in_channels):
            output_norm = get_norm(norm, out_channels)
            stage = int(math.log2(in_strides[idx]))

            pos_embedding = DownsampleEmbedding(
                1,
                size=pos_size_base*2**(num_levels-idx+1),
                downasamples=num_levels-idx+1)
            tokenizer = Tokenizer(
                in_channels, CT, self.length, pos_embedding)
            projector_in = in_channels if idx == num_levels -1 else out_channels
            projector = Projector(CT, projector_in, out_channels)
            output_conv = Conv2d(
                out_channels,
                out_channels,
                kernel_size=3,
                stride=1,
                padding=1,
                bias=use_bias,
                norm=output_norm,
            )
            weight_init.c2_xavier_fill(output_conv)
            self.add_module("fpn_tokenizer{}".format(stage), tokenizer)
            self.add_module("fpn_projector{}".format(stage), projector)
            self.add_module("fpn_output{}".format(stage), output_conv)

            output_convs.append(output_conv)
            tokenizers.append(tokenizer)
            projectors.append(projector)
        self.transformer = Transformer(CT)
        self.add_module("fpn_tranformer", self.transformer)
        # Place convs into top-down order (from low to high resolution)
        # to make the top-down computation in forward clearer.
        self.output_convs = output_convs[::-1]
        self.projectors = projectors[::-1]
        self.tokenizers = tokenizers[::-1]
        self.top_block = top_block
        self.in_features = in_features
        self.bottom_up = bottom_up
        # Return feature names are "p<stage>", like ["p2", "p3", ..., "p6"]
        self._out_feature_strides = {"p{}".format(int(math.log2(s))): s for s in in_strides}
        # top block output feature maps.
        if self.top_block is not None:
            for s in range(stage, stage + self.top_block.num_levels):
                self._out_feature_strides["p{}".format(s + 1)] = 2 ** (s + 1)

        self._out_features = list(self._out_feature_strides.keys())
        self._out_feature_channels = {k: out_channels for k in self._out_features}
        self._size_divisibility = in_strides[-1]
        assert fuse_type in {"avg", "sum"}
        self._fuse_type = fuse_type

    @property
    def size_divisibility(self):
        return self._size_divisibility

    def forward(self, x):
        """
        Args:
            input (dict[str->Tensor]): mapping feature map name (e.g., "res5") to
                feature map tensor for each feature level in high to low resolution order.

        Returns:
            dict[str->Tensor]:
                mapping from feature map name to FPN feature map tensor
                in high to low resolution order. Returned feature names follow the FPN
                paper convention: "p<stage>", where stage has stride = 2 ** stage e.g.,
                ["p2", "p3", ..., "p6"].
        """
        # Reverse feature maps into top-down order (from low to high resolution)
        bottom_up_features = self.bottom_up(x)
        x = [bottom_up_features[f] for f in self.in_features[::-1]]

        tokens = [tokenizer(f) for f, tokenizer in zip(x, self.tokenizers)]
        tokens = cat(tokens, dim=2)
        tokens = self.transformer(tokens)
        tokens = tokens.split(self.length, 2)

        results = []
        prev_feature = self.projectors[0](x[0], tokens[0])
        results.append(self.output_convs[0](prev_feature))
        for feature, token, projector, output_conv in zip(
            x[1:], tokens[1:], self.projectors[1:], self.output_convs[1:]
        ):
            top_down_feature = F.interpolate(
                prev_feature, scale_factor=2, mode="nearest")
            prev_features = projector(top_down_feature, token) + top_down_feature
            if self._fuse_type == "avg":
                prev_features /= 2
            results.insert(0, output_conv(prev_features))

        if self.top_block is not None:
            top_block_in_feature = bottom_up_features.get(self.top_block.in_feature, None)
            if top_block_in_feature is None:
                top_block_in_feature = results[self._out_features.index(self.top_block.in_feature)]
            results.extend(self.top_block(top_block_in_feature))
        assert len(self._out_features) == len(results)
        return dict(zip(self._out_features, results))
